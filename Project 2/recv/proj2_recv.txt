Script started on Wed 03 May 2017 12:40:22 PM EDT
[7mcisc450[27m[19] [~/cisc450/project2/recv/]> ls -l
total 8
-rw-rw-r-- 1 tcardy tcardy   62 May  3 12:35 Makefile
-rw-r----- 1 tcardy tcardy    0 May  3 12:40 proj2_recv.txt
-rw-rw-r-- 1 tcardy tcardy 8081 May  3 12:13 recv.cpp
[7mcisc450[27m[20] [~/cisc450/project2/recv/]> g++ -o recv recv.cpp
[7mcisc450[27m[21] [~/cisc450/project2/recv/]> ls -l
total 8
-rw-rw-r-- 1 tcardy tcardy    62 May  3 12:35 Makefile
-rw-r----- 1 tcardy tcardy     0 May  3 12:40 proj2_recv.txt
-rwxr-x--- 1 tcardy tcardy 20518 May  3 12:40 recv
-rw-rw-r-- 1 tcardy tcardy  8081 May  3 12:13 recv.cpp
[7mcisc450[27m[22] [~/cisc450/project2/recv/]> ./recv
Please enter Packet loss Rate. Example: .2 

0
Please enter Ack loss rate. Example: .3 

0
Waiting for incoming messages on port 5045

./send      Packet 0 received with 16 data bytes
ACK 0 transmitted
Packet 1 received with 32 data bytes
ACK 1 transmitted
Packet 0 received with 14 data bytes
ACK 0 transmitted
Packet 1 received with 2 data bytes
ACK 1 transmitted
Packet 0 received with 17 data bytes
ACK 0 transmitted
Packet 1 received with 11 data bytes
ACK 1 transmitted
Packet 0 received with 2 data bytes
ACK 0 transmitted
Packet 1 received with 64 data bytes
ACK 1 transmitted
Packet 0 received with 65 data bytes
ACK 0 transmitted
Packet 1 received with 63 data bytes
ACK 1 transmitted
Packet 0 received with 53 data bytes
ACK 0 transmitted
Packet 1 received with 60 data bytes
ACK 1 transmitted
Packet 0 received with 59 data bytes
ACK 0 transmitted
Packet 1 received with 58 data bytes
ACK 1 transmitted
Packet 0 received with 63 data bytes
ACK 0 transmitted
Packet 1 received with 47 data bytes
ACK 1 transmitted
Packet 0 received with 2 data bytes
ACK 0 transmitted
Packet 1 received with 2 data bytes
ACK 1 transmitted
Packet 0 received with 57 data bytes
ACK 0 transmitted
Packet 1 received with 55 data bytes
ACK 1 transmitted
Packet 0 received with 62 data bytes
ACK 0 transmitted
Packet 1 received with 58 data bytes
ACK 1 transmitted
Packet 0 received with 58 data bytes
ACK 0 transmitted
Packet 1 received with 58 data bytes
ACK 1 transmitted
Packet 0 received with 64 data bytes
ACK 0 transmitted
Packet 1 received with 2 data bytes
ACK 1 transmitted
Packet 0 received with 18 data bytes
ACK 0 transmitted
Packet 1 received with 62 data bytes
ACK 1 transmitted
Packet 0 received with 62 data bytes
ACK 0 transmitted
Packet 1 received with 62 data bytes
ACK 1 transmitted
Packet 0 received with 62 data bytes
ACK 0 transmitted
Packet 1 received with 62 data bytes
ACK 1 transmitted
Packet 0 received with 62 data bytes
ACK 0 transmitted
Packet 1 received with 62 data bytes
ACK 1 transmitted
Packet 0 received with 62 data bytes
ACK 0 transmitted
Packet 1 received with 16 data bytes
ACK 1 transmitted
Packet 0 received with 2 data bytes
ACK 0 transmitted
Packet 1 received with 46 data bytes
ACK 1 transmitted
Packet 0 received with 30 data bytes
ACK 0 transmitted
Packet 1 received with 46 data bytes
ACK 1 transmitted
Packet 0 received with 52 data bytes
ACK 0 transmitted
Packet 1 received with 48 data bytes
ACK 1 transmitted
Packet 0 received with 2 data bytes
ACK 0 transmitted
Packet 1 received with 2 data bytes
ACK 1 transmitted
Packet 0 received with 24 data bytes
ACK 0 transmitted
Packet 1 received with 2 data bytes
ACK 1 transmitted
Packet 0 received with 79 data bytes
ACK 0 transmitted
Packet 1 received with 24 data bytes
ACK 1 transmitted
Packet 0 received with 80 data bytes
ACK 0 transmitted
Packet 1 received with 6 data bytes
ACK 1 transmitted
Packet 0 received with 80 data bytes
ACK 0 transmitted
Packet 1 received with 6 data bytes
ACK 1 transmitted
Packet 0 received with 21 data bytes
ACK 0 transmitted
Packet 1 received with 18 data bytes
ACK 1 transmitted
Packet 0 received with 47 data bytes
ACK 0 transmitted
Packet 1 received with 58 data bytes
ACK 1 transmitted
Packet 0 received with 40 data bytes
ACK 0 transmitted
Packet 1 received with 63 data bytes
ACK 1 transmitted
Packet 0 received with 42 data bytes
ACK 0 transmitted
Packet 1 received with 25 data bytes
ACK 1 transmitted
Packet 0 received with 39 data bytes
ACK 0 transmitted
Packet 1 received with 40 data bytes
ACK 1 transmitted
Packet 0 received with 16 data bytes
ACK 0 transmitted
Packet 1 received with 52 data bytes
ACK 1 transmitted
Packet 0 received with 80 data bytes
ACK 0 transmitted
Packet 1 received with 2 data bytes
ACK 1 transmitted
Packet 0 received with 2 data bytes
ACK 0 transmitted
Packet 1 received with 16 data bytes
ACK 1 transmitted
Packet 0 received with 15 data bytes
ACK 0 transmitted
Packet 1 received with 14 data bytes
ACK 1 transmitted
Packet 0 received with 2 data bytes
ACK 0 transmitted
Packet 1 received with 64 data bytes
ACK 1 transmitted
Packet 0 received with 62 data bytes
ACK 0 transmitted
Packet 1 received with 33 data bytes
ACK 1 transmitted
Packet 0 received with 39 data bytes
ACK 0 transmitted
Packet 1 received with 65 data bytes
ACK 1 transmitted
Packet 0 received with 65 data bytes
ACK 0 transmitted
Packet 1 received with 72 data bytes
ACK 1 transmitted
Packet 0 received with 2 data bytes
ACK 0 transmitted
Packet 1 received with 66 data bytes
ACK 1 transmitted
Packet 0 received with 47 data bytes
ACK 0 transmitted
Packet 1 received with 2 data bytes
ACK 1 transmitted
Packet 0 received with 17 data bytes
ACK 0 transmitted
Packet 1 received with 60 data bytes
ACK 1 transmitted
Packet 0 received with 60 data bytes
ACK 0 transmitted
Packet 1 received with 10 data bytes
ACK 1 transmitted
Packet 0 received with 60 data bytes
ACK 0 transmitted
Packet 1 received with 10 data bytes
ACK 1 transmitted
Packet 0 received with 59 data bytes
ACK 0 transmitted
Packet 1 received with 15 data bytes
ACK 1 transmitted
Packet 0 received with 2 data bytes
ACK 0 transmitted
Packet 1 received with 2 data bytes
ACK 1 transmitted
End of Transmission Packet with sequence number 0 received with 0 data bytes
Number of data packets received successfully: 92
Total number of data bytes delivered to user: 3507
Total number of duplicate data packets received: 0
Number of data packets dropped due to loss: 0
Total number of data packets received: 92
Number of ACKs transmitted without loss: 92
Number of ACKs generated but dropped due to loss: 0
Total number of ACKs generated: 92
Total elapsed time from start to end in milliseconds: 35657
[7mcisc450[27m[23] [~/cisc450/project2/recv/]> ls -l
total 22
-rw-rw-r-- 1 tcardy tcardy    62 May  3 12:35 Makefile
-rw-r----- 1 tcardy tcardy  3415 May  3 12:41 out.txt
-rw-r----- 1 tcardy tcardy     0 May  3 12:40 proj2_recv.txt
-rwxr-x--- 1 tcardy tcardy 20518 May  3 12:40 recv
-rw-rw-r-- 1 tcardy tcardy  8081 May  3 12:13 recv.cpp
[7mcisc450[27m[24] [~/cisc450/project2/recv/]> cat out.txt
\begin{center}
{\bf PROGRAMMING PROJECT 2\\ }
\end{center}

%\vspace{0.3in}
\noindent

In this project, you will implement a Transport Layer protocol
to transmit data from a Sender to a Receiver in the presence of
errors and packet loss. The protocol to be implemented by you
is the Stop-and-Wait protocol. The protocol will be
unidirectional in which data is sent in one direction only
with acknowledgments being sent in the reverse direction.
Only positive ACKs are used. The transmission of packets
and ACKs will be done over UDP (that represents an unreliable
network layer channel) using fixed UDP ports.


To implement this protocol, you will write two separate
programs called {\em Sender} and {\em Receiver} which
represent the actions to be executed by the sending node and
the receiving node respectively. Both the Sender and the
Receiver must run on the host {\em cis450.cis.udel.edu},
but they should be written in such a way that they could
conceivably be run on any two hosts, not necessarily the same.

\begin{verbatim}
    <----------------- 16 bits (2 bytes) ------------------>
    --------------------------------------------------------
    |              Count (no. of data bytes)               |
    --------------------------------------------------------
    |                Packet Sequence Number                |
    --------------------------------------------------------
    |            Data Bytes      |          ...            |
    --------------------------------------------------------
\end{verbatim}

The second field of the header is called the
packet sequence number. Each
packet transmitted by the Sender is assigned
a sequence number that alternates between 0 and 1,
in accordance with the Stop-and-Wait protocol.


Output of your program

At specific places in both your Sender and Receiver programs, you must print 
out specific messages.
The symbol ‚Äún‚Äù below refers to the sequence number of the transmitted or receiv
0 or 1), and the symbol ‚Äúc‚Äù below refers to the count (number of data bytes) in
 the transmitted or
received packet.
The messages to be printed by the Sender are:
When a new data packet numbered n is sent by the Sender:
Packet n transmitted with c data bytes
When a data packet numbered n is retransmitted by the Sender:
Packet n retransmitted with c data bytes
When a timeout expires:
Timeout expired for packet numbered n
When an ACK is received with number n:
ACK n received
When the ‚ÄúEnd of Transmission‚Äù packet is sent:
End of Transmission Packet with sequence number n transmitted with c data bytes

\begin{center}
{\bf Testing}
\end{center}

The files {\em test1.txt} and {\em test2.txt} in the directory
{\em /usa/sethi/networks/proj1} on {\em cis450.cis.udel.edu}
are sample input files that may
be used by you to test your programs.
It is strongly suggested that you first use {\em test1.txt} for
all your testing, and only if you have thoroughly debugged your
programs, then proceed with using {\em test2.txt} for further testing.

It is also suggested that you test your programs in phases using
the following configuration parameter values:

\begin{itemize}
\item Packet and ACK loss rates 0, Timeout value $n$  = 5.
\item Packet loss rate 0.2, ACK loss rate 0, Timeout value
$n$ = 5.
\item Packet loss rate 0, ACK loss rate 0.2, Timeout value
$n$ = 5.
\item Packet and ACK loss rates 0, Timeout value $n$ = 3.
\end{itemize}


[7mcisc450[27m[25] [~/cisc450/project2/recv/]> exit
exit

Script done on Wed 03 May 2017 12:42:37 PM EDT
